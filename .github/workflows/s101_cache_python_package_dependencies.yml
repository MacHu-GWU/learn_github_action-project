# This is an advanced workflow to show you how to use cache to accelerate CI job run
name: s101_cache_python_package_dependencies

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  # ----------------------------------------------------------------------------
#  # without_pip_cache and with_pip_cache are two examples to show how to
#  # use cache to accelerate CI job run
#  # ----------------------------------------------------------------------------
#  without_pip_cache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#      - name: install python dependencies
#        run: pip install -r examples/s101_cache_python_package_dependencies/requirements.txt
#  with_pip_cache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          # ref: https://github.com/actions/setup-python#caching-packages-dependencies
#          cache: 'pip'
#          cache-dependency-path: examples/s101_cache_python_package_dependencies/requirements.txt
#      - name: install python dependencies
#        run: pip install -r examples/s101_cache_python_package_dependencies/requirements.txt
#  # ----------------------------------------------------------------------------
#  # without_poetry_cache and with_poetry_cache are two examples to show how to
#  # use cache to accelerate CI job run
#  # ----------------------------------------------------------------------------
#  without_poetry_cache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install virtualenv and poetry
#        run: |
#          pip install virtualenv
#          pip install poetry
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#      - name: setup virtualenv
#        run: |
#      - name: setup virtualenv, install python dependencies
#        working-directory: ./examples/s101_cache_python_package_dependencies
#        run: |
#          virtualenv -p python3.9 .venv
#          poetry install
#          .venv/bin/pip list
#  # ref:
#  # Advance usage - Caching packages: https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
#  with_poetry_cache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      # we enable pip cache here, because we need to pip install virtualenv and poetry
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#          # we should create a requirements_auto.txt file to store the pip install dependencies
#          cache-dependency-path: examples/s101_cache_python_package_dependencies/requirements_auto.txt
#      # install virtualenv and poetry to global python before next step
#      - name: Install virtualenv and poetry
#        run: |
#          pip install virtualenv
#          pip install poetry
#      # we enable poetry cache here, it will cache the .venv folder
#      # the .venv folder is automatically discovered by poetry
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          cache: 'poetry'
#          # use poetry.lock as cache key
#          cache-dependency-path: examples/s101_cache_python_package_dependencies/poetry.lock
#      # if you are using monorepo, you can set the working directory to the project sub folder
#      - name: setup virtualenv, install python dependencies
#        working-directory: ./examples/s101_cache_python_package_dependencies
#        # we use ``[ ! -d "..."] && ...`` to check if the cached .venv folder exists,
#        # if exists, we should skip the virtualenv creation and poetry install
#        # we may still need to install the project Python library itself
#        # using ``poetry install --only-root``  (without installing dependencies)
#        run: |
#          [ ! -d ".venv" ] && virtualenv -p python3.9 .venv
#          [ ! -d ".venv/lib/python3.9/site-packages/boto3" ] && poetry install
#          .venv/bin/pip list
  # ref:
  # Advance usage - Caching packages: https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
  ultimate_poetry_cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      # ------------------------------------------------------------------------------
      - name: Setup Python for virtualenv and poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: examples/s101_cache_python_package_dependencies/requirements_auto.txt
      - name: Install virtualenv and poetry
        run: |
          pip install virtualenv
          pip install poetry
      # ------------------------------------------------------------------------------
      - name: Setup Python for bootstrap
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'poetry'
          cache-dependency-path: examples/s101_cache_python_package_dependencies/bootstrap/poetry.lock
      - name: Setup Virtualenv for bootstrap
        working-directory: ./examples/s101_cache_python_package_dependencies/bootstrap
        run: |
          [ ! -d ".venv" ] && pip install virtualenv
          [ ! -d ".venv" ] && virtualenv -p python3.9 .venv
          [ ! -d ".venv/bin/virtualenv" ] && .venv/bin/pip install virtualenv
          [ ! -d ".venv/bin/poetry" ] && .venv/bin/pip install poetry
          [ ! -d ".venv/bin/poetry" ] && .venv/bin/poetry install
          .venv/bin/pip list
      # ------------------------------------------------------------------------------
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'poetry'
          cache-dependency-path: examples/s101_cache_python_package_dependencies/poetry.lock
      - name: Setup Virtualenv
        working-directory: ./examples/s101_cache_python_package_dependencies
        run: |
          [ ! -d ".venv" ] && bootstrap/.venv/bin/virtualenv -p python3.9 .venv
          [ ! -d ".venv/lib/python3.9/site-packages/boto3" ] && bootstrap/.venv/bin/poetry install
          .venv/bin/pip list
